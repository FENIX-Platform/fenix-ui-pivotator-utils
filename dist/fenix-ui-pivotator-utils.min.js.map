{"version":3,"sources":["webpack:///fenix-ui-pivotator-utils.min.js","webpack:///webpack/bootstrap b8eccd7310e7bd4f8dfa","webpack:///./src/js/index.js","webpack:///external \"underscore\""],"names":["define","__WEBPACK_EXTERNAL_MODULE_2__","modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","_","parseInput","FX","opt","getDimension","ret","i","FXmod","dimensions","push","getListDim","arr","showCode","label","code","extend","convertFXDirty","inputFormat","lang","console","log","aggregationFn","value","aggregations","hidden","columns","values","groupedRow","rows","formatter","showRowHeaders","decimals","showFlag","showUnit","length","convertFX","setDimension","att","val","subject","structInter","setValue","hasOwnProperty","myColumns","key","title","split","dataType","setDirty","field","structDirty","attributes","type","unit","initFXT","FXmodnew","retObj","initFXD","initFXDgraph","toFilter","model","fxt","metadata","dsd","groupName","rowLabel","columnsLabel","hiddenLabel","aggregationsLabel","valuesLabel","configuration","dimensionsSort","selector","source","config","groups","template","hideSwitch","hideRemoveButton","aggregatorValue","maxItems","default","map","item","parent","union","toChartConfig","x","series","y","Array","isArray","typeOfChart","aggValue","Value","VALUE","show","t","ii","flag","h","attribute","toTableConfig","format","apply","undefined"],"mappings":"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","file":"fenix-ui-pivotator-utils.min.js","sourcesContent":["define([\"underscore\"], function(__WEBPACK_EXTERNAL_MODULE_2__) { return /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;if (false) {\n\t\tvar define = require('amdefine')(module);\n\t}\n\t\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n\t\t\t__webpack_require__(2)\n\t\t], __WEBPACK_AMD_DEFINE_RESULT__ = function (_) {\n\t\n\t\n\t\t\tvar FXmod;\n\t\n\t\t\tfunction parseInput(FX, opt) {// FX.metadata.dsd,options\n\t\t\t\tvar ret = {};\n\t\t\t\t_.extend(ret, opt);\n\t\n\t\t\t\tvar FXmod = convertFXDirty(FX, opt);\n\t\n\t\t\t\tfunction getDimension()\n\t\t\t\t{var ret=[];\n\t\t\t\t\tfor(var i in FXmod.dimensions)\n\t\t\t\t\t{\n\t\t\t\t\t\tret.push(i)\n\t\t\t\t\t}\n\t\t\t\t\treturn ret\n\t\t\t\t}\n\t\n\t\t\t\tfunction getListDim(arr, opt, FXmod) {\n\t\t\t\t\tvar showCode = opt.showCode;\n\t\t\t\t\tvar ret = [];\n\t\t\t\t\tfor (var i in arr) {\n\t\t\t\t\t\tif (showCode && FXmod.dimensions[arr[i]].label) {ret.push(FXmod.dimensions[arr[i]].code);}\n\t\t\t\t\t\t//    console.log(arr[i],FXmod.dimensions,FXmod.dimensions[arr[i]]);\n\t\n\t\t\t\t\t\tret.push(FXmod.dimensions[arr[i]].label || FXmod.dimensions[arr[i]].code)\n\t\t\t\t\t}\n\t\t\t\t\treturn ret\n\t\t\t\t}\n\t\n\t\t\t\tif (opt.inputFormat == \"fenixtool\") {\n\t\n\t\t\t\t\tvar lang = \"EN\";\n\t\t\t\t\tif (opt.lang) {lang = opt.lang;}\n\t\t\t\t\tvar aggregations = [],\n\t\t\t\t\t\thidden = [],\n\t\t\t\t\t\tcolumns = [],\n\t\t\t\t\t\trows = [],\n\t\t\t\t\t\tvalues = [];\n\t\n\t\n\t\n\t\t\t\t\tconsole.log(\"initRow\",opt)\n\t\n\t\t\t\t\tret = {\n\t\t\t\t\t\t\"inputFormat\": \"fenixTool\",\n\t\t\t\t\t\t\"aggregationFn\": opt.aggregationFn || {\"value\": \"sum\"},\n\t\t\t\t\t\t\"aggregations\": getListDim(opt.aggregations, opt, FXmod),\n\t\t\t\t\t\t\"hidden\": getListDim(opt.hidden, opt, FXmod),\n\t\t\t\t\t\t\"columns\": getListDim(opt.columns, opt, FXmod),\n\t\t\t\t\t\t\"values\": opt.values||\"value\",\n\t\t\t\t\t\t\"groupedRow\": opt.groupedRow,\n\t\t\t\t\t\t\"rows\":getListDim(opt.rows, opt, FXmod) ,\n\t\t\t\t\t\t\"formatter\": opt.formatter || \"value\",\n\t\t\t\t\t\t\"showRowHeaders\": opt.showRowHeaders || false,\n\t\t\t\t\t\t\"decimals\": opt.decimals || 2,\n\t\t\t\t\t\t\"showCode\": opt.showCode || false,\n\t\t\t\t\t\t\"showFlag\": opt.showFlag || false,\n\t\t\t\t\t\t\"showUnit\": opt.showUnit || false\n\t\t\t\t\t};\n\t\n\t\n\t\t\t\t}\n\t\t\t\tif(ret.columns.length+ret.rows.length==0)\n\t\t\t\t{\n\t\t\t\t\t//console.log(\"FXmod\",getDimension())\n\t\t\t\t\tret.rows=getListDim(getDimension(),opt,FXmod)\n\t\n\t\t\t\t}\n\t\t\t\treturn ret\n\t\t\t}\n\t\n\t\t\tfunction convertFX(FX, opt) {\n\t\t\t\t//console.log(\"FX\", FX)\n\t\t\t\tvar lang = \"EN\";\n\t\t\t\tif (opt && opt.hasOwnProperty(\"lang\")) {\n\t\t\t\t\tlang = opt.lang;\n\t\t\t\t}\n\t\t\t\tvar structInter = {dimensions: {}, values: {}}\n\t\n\t\t\t\tfunction setDimension(id, att, val, subject) {\n\t\t\t\t\tif (!structInter.dimensions[id]) {\n\t\t\t\t\t\tstructInter.dimensions[id] = {};\n\t\t\t\t\t}\n\t\t\t\t\tstructInter.dimensions[id][att] = val;\n\t\t\t\t\tif (subject) {structInter.dimensions[id][\"subject\"] = subject;}\n\t\t\t\t}\n\t\n\t\t\t\tfunction setAttribute(id, att, val, subject) {\n\t\t\t\t\tif (!structInter.attribute[id]) {\n\t\t\t\t\t\tstructInter.attribute[id] = {};\n\t\t\t\t\t}\n\t\t\t\t\tstructInter.attribute[id][att] = val;\n\t\t\t\t\tif (subject) {\n\t\t\t\t\t\tstructInter.attribute[id][\"subject\"] = subject;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tfunction setValue(id, att, val) {\n\t\t\t\t\tif (!structInter.values[id]) {\n\t\t\t\t\t\tstructInter.values[id] = {};\n\t\t\t\t\t}\n\t\t\t\t\tif (att != \"attribute\") {\n\t\t\t\t\t\tstructInter.values[id][att] = val;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (!structInter.values[id][\"attributes\"]) {\n\t\t\t\t\t\t\tstructInter.values[id][\"attributes\"] = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstructInter.values[id][\"attributes\"].push(val);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tfor (var i in FX.columns) {\n\t\t\t\t\tvar myColumns = FX.columns[i];\n\t\t\t\t\tif (myColumns.key == true) {//c est le code\n\t\t\t\t\t\tsetDimension(myColumns.id, \"title\", myColumns.title[lang] || myColumns.id);\n\t\t\t\t\t\tsetDimension(myColumns.id, \"code\", myColumns.id, myColumns.subject);\n\t\t\t\t\t}\n\t\t\t\t\telse if (myColumns.id.split(\"_\" + lang).length == 2) {//label\n\t\t\t\t\t\tsetDimension(myColumns.id.split(\"_\" + lang)[0], \"label\", myColumns.id)\n\t\t\t\t\t\t/*\tif(!structInter.dimensions[myColumns.id.split(\"_\" + lang)[0]]){\n\t\t\t\t\t\t setDimension(myColumns.id, \"title\", myColumns.id.split(\"_\" + lang)[0]);\n\t\t\t\t\t\t setDimension(myColumns.id, \"code\",myColumns.id.split(\"_\" + lang)[0]);}*/\n\t\t\t\t\t}\n\t\t\t\t\telse if (myColumns.dataType == \"number\" && myColumns.subject == \"value\") {\n\t\t\t\t\t\tsetValue(myColumns.id, \"value\", myColumns.id);\n\t\t\t\t\t\tsetValue(myColumns.id, \"label\", myColumns.id);\n\t\t\t\t\t\tsetValue(myColumns.id, \"subject\", myColumns.subject);\n\t\t\t\t\t}\n\t\t\t\t\telse if (myColumns.id.split(\"|*\").length == 2) {//attribut d une valeur X\n\t\t\t\t\t\tif (myColumns.subject == \"um\") {\n\t\t\t\t\t\t\tsetValue(myColumns.id.split(\"|*\")[0], \"unit\", myColumns.id)\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (myColumns.subject == \"flag\") {\n\t\t\t\t\t\t\tsetValue(myColumns.id.split(\"|*\")[0], \"flag\", myColumns.id);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tsetValue(myColumns.id.split(\"|*\")[0], \"attributes\", myColumns.id);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {//attribut de value\n\t\t\t\t\t\tif (myColumns.subject == \"um\") {\n\t\t\t\t\t\t\tsetValue(\"value\", \"unit\", myColumns.id);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (myColumns.subject == \"flag\") {\n\t\t\t\t\t\t\tsetValue(\"value\", \"flag\", myColumns.id);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t// setDimension(myColumns.id, \"label\", myColumns.title[lang]||myColumns.id);\n\t\t\t\t\t\t\t//  setDimension(myColumns.id, \"code\", myColumns.id, myColumns.subject);\n\t\n\t\t\t\t\t\t\t//setAttribute(myColumns.id, \"id\", myColumns.id)\n\t\n\t\t\t\t\t\t\tsetValue(\"value\", \"attribute\", myColumns.id)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t//\t\t\tfor()\n\t\t\t\t//console.log(\"structInter\", structInter)\n\t\t\t\treturn structInter;\n\t\t\t}\n\t\n\t\t\tfunction convertFXDirty(FX, opt) {\n\t\t\t\t//console.log(\"FXDIRTY \",FX);\n\t\t\t\tvar structInter = {dimensions: {}, values: {}, attributes: {}}\n\t\t\t\tvar structDirty = {};\n\t\n\t\t\t\tvar lang = \"EN\";\n\t\t\t\tif (opt && opt.lang) {\n\t\t\t\t\tlang = opt.lang;\n\t\t\t\t}\n\t\n\t\t\t\tfunction setDirty(id, field, val) {\n\t\t\t\t\tif (!structDirty[id]) {\n\t\t\t\t\t\tstructDirty[id] = {};\n\t\t\t\t\t}\n\t\t\t\t\tif (field == \"attributes\") {\n\t\t\t\t\t\tif (structDirty[id][field]) {\n\t\t\t\t\t\t\tstructDirty[id][field].push(val);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tstructDirty[id][field] = [val];\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tstructDirty[id][field] = val;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tfor (var i in FX.columns) {\n\t\t\t\t\tvar myColumns = FX.columns[i];\n\t\t\t\t\tif (myColumns.key == true) {//c est le code\n\t\t\t\t\t\tsetDirty(myColumns.id, \"code\", myColumns.id);\n\t\t\t\t\t\tsetDirty(myColumns.id, \"title\", myColumns.title[lang] || myColumns.id);\n\t\t\t\t\t\tsetDirty(myColumns.id, \"type\", \"dimension\");\n\t\t\t\t\t\tif (myColumns.subject) {\n\t\t\t\t\t\t\tsetDirty(myColumns.id, \"subject\", myColumns.subject);\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t/*setDimension(myColumns.id, \"title\", myColumns.title[lang]||myColumns.id);\n\t\t\t\t\t\t setDimension(myColumns.id, \"code\", myColumns.id, myColumns.subject);*/\n\t\t\t\t\t}\n\t\t\t\t\telse if (myColumns.id.split(\"_\" + lang).length == 2) {//label\n\t\t\t\t\t\tsetDirty(myColumns.id.split(\"_\" + lang)[0], \"label\", myColumns.id);\n\t\t\t\t\t\t//setDimension(myColumns.id.split(\"_\" + lang)[0], \"label\", myColumns.id)\n\t\n\t\t\t\t\t}\n\t\t\t\t\telse if (myColumns.dataType == \"number\" && myColumns.subject == \"value\") {\n\t\n\t\t\t\t\t\t/* setDirty(myColumns.id.toLowerCase(), \"type\", \"value\");\n\t\t\t\t\t\t setDirty(myColumns.id.toLowerCase(), \"value\", myColumns.id);\n\t\t\t\t\t\t setDirty(myColumns.id.toLowerCase(), \"title\", myColumns.id);\n\t\t\t\t\t\t */\n\t\t\t\t\t\t//console.log(myColumns)\n\t\t\t\t\t\tsetDirty(\"value\", \"type\", \"value\");\n\t\t\t\t\t\tsetDirty(\"value\", \"value\", myColumns.id);\n\t\t\t\t\t\tsetDirty(\"value\", \"title\", \"value\" || myColumns.title[lang] || myColumns.id);\n\t\n\t\t\t\t\t\tif (myColumns.subject) {\n\t\t\t\t\t\t\t// setDirty(myColumns.id.toLowerCase(), \"subject\", myColumns.subject);\n\t\t\t\t\t\t\tsetDirty(\"value\", \"subject\", myColumns.subject);\n\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (myColumns.id.split(\"|*\").length == 2) {//attribut d une valeur X\n\t\t\t\t\t\tif (myColumns.subject == \"um\") {\n\t\t\t\t\t\t\tsetDirty(myColumns.id.split(\"|*\")[0], \"unit\", myColumns.id);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (myColumns.subject == \"flag\") {\n\t\t\t\t\t\t\tsetDirty(myColumns.id.split(\"|*\")[0], \"flag\", myColumns.id);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tsetDirty(myColumns.id.split(\"|*\")[0], \"attributes\", myColumns.id);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {//attribut de value\n\t\n\t\t\t\t\t\tif (myColumns.subject == \"um\") {\n\t\t\t\t\t\t\t//setValue(\"value\", \"unit\", myColumns.id);\n\t\t\t\t\t\t\tsetDirty(myColumns.id, \"type\", \"attribute\");\n\t\t\t\t\t\t\tsetDirty(myColumns.id, \"value\", myColumns.id);\n\t\t\t\t\t\t\tsetDirty(myColumns.id, \"title\", \"unit\");\n\t\t\t\t\t\t\tif (myColumns.subject) {\n\t\t\t\t\t\t\t\tsetDirty(myColumns.id, \"subject\", myColumns.subject);\n\t\t\t\t\t\t\t}\n\t\n\t\n\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\tsetDirty(\"value\", \"unit\", myColumns.id)\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (myColumns.subject == \"flag\") {\n\t\t\t\t\t\t\t//setValue(\"value\", \"flag\", myColumns.id);\n\t\t\t\t\t\t\tsetDirty(\"value\", \"flag\", myColumns.id)\n\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t//// setDimension(myColumns.id, \"label\", myColumns.title[lang]||myColumns.id);\n\t\t\t\t\t\t\t////  setDimension(myColumns.id, \"code\", myColumns.id, myColumns.subject);\n\t\t\t\t\t\t\t////setAttribute(myColumns.id, \"id\", myColumns.id)\n\t\n\t\t\t\t\t\t\t//setValue(\"value\", \"attribute\", myColumns.id)\n\t\t\t\t\t\t\tsetDirty(myColumns.id, \"type\", \"attribute\");\n\t\t\t\t\t\t\tsetDirty(myColumns.id, \"value\", myColumns.id);\n\t\t\t\t\t\t\tsetDirty(myColumns.id, \"title\", myColumns.title[lang] || myColumns.id);\n\t\t\t\t\t\t\tif (myColumns.subject) {\n\t\t\t\t\t\t\t\tsetDirty(myColumns.id, \"subject\", myColumns.subject);\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//console.log(\"FXDIRTY interm \",structDirty);\n\t\t\t\tfor (var i in structDirty) {\n\t\t\t\t\tif (structDirty[i].type == \"dimension\") {\n\t\t\t\t\t\tstructInter.dimensions[i] = structDirty[i];\n\t\t\t\t\t}\n\t\t\t\t\telse if (structDirty[i].type == \"value\") {\n\t\t\t\t\t\tstructInter.values[i] = structDirty[i];\n\t\t\t\t\t}\n\t\n\t\t\t\t\telse {\n\t\t\t\t\t\tstructInter.attributes[i] = structDirty[i];\n\t\t\t\t\t\tif ( structDirty[i].subject == \"um\") {\n\t\n\t\t\t\t\t\t\t//console.log(\"strucInter\",structInter,structDirty)\n\t\t\t\t\t\t\tstructInter.values.value.unit= structDirty[i].label || structDirty[i].value;\n\t\t\t\t\t\t\t//setDirty(\"value\", \"unit\", myColumns.id);\n\t\t\t\t\t\t\t//structInter.values[i].unit = structDirty[i];\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\t//console.log(\"structInterDirty\",structDirty,\"structInter\",structInter);\n\t\t\t\t//console.log(\"FXDIRTY return \",structInter);\n\t\n\t\t\t\treturn structInter;\n\t\t\t}\n\t\n\t\n\t\t\tfunction initFXT(FX, opt) {//for Toolbar\n\t\n\t\t\t\t// var FXmodold = convertFX(FX, opt);\n\t\t\t\tvar FXmodnew = convertFXDirty(FX, opt);\n\t\n\t\t\t\tFXmod = FXmodnew;\n\t\n\t\t\t\tvar hidden = [];\n\t\t\t\tvar columns = [];\n\t\t\t\tvar rows = [];\n\t\t\t\tvar aggregations = [];\n\t\t\t\tvar values = [];\n\t\n\t\t\t\tfor (var i in FXmod.dimensions) {\n\t\t\t\t\tif (FXmod.dimensions[i].subject == \"time\") {\n\t\t\t\t\t\tcolumns.push({value: FXmod.dimensions[i].code, label: FXmod.dimensions[i].title});\n\t\n\t\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\trows.push({value: FXmod.dimensions[i].code, label: FXmod.dimensions[i].title});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tfor (var i in FXmod.values) {\n\t\t\t\t\tvalues.push({value: FXmod.values[i].value, label: FXmod.values[i].title});\n\t\t\t\t}\n\t\t\t\tfor (var i in FXmod.attributes) {\n\t\n\t\t\t\t\taggregations.push({value: FXmod.attributes[i].value, label: FXmod.attributes[i].title});\n\t\t\t\t}\n\t\n\t\t\t\tvar retObj = {\n\t\t\t\t\thidden: hidden,\n\t\t\t\t\trows: rows,\n\t\t\t\t\tcolumns: columns,\n\t\t\t\t\taggregations: aggregations,\n\t\t\t\t\tvalues: values\n\t\t\t\t}\n\t\t\t\t//           console.log(retObj)\n\t\t\t\treturn retObj;\n\t\t\t}\n\t\n\t\t\tfunction initFXD(FX, opt) {//for Data\n\t\t\t\t/*  var FXmod = convertFX(FX, opt);\n\t\t\t\t var hidden = [];\n\t\t\t\t var columns = [];\n\t\t\t\t var rows = [];\n\t\t\t\t var aggregations = [];\n\t\t\t\t var values = [];\n\t\t\t\t for (var i in FXmod.dimensions) {\n\t\t\t\t if (opt.rows[FXmod.dimensions[i].code]) {\n\t\t\t\t rows.push(FXmod.dimensions[i].label || FXmod.dimensions[i].code)\n\t\t\t\t if (opt.showCode == true && FXmod.dimensions[i].title != FXmod.dimensions[i].code && FXmod.dimensions[i].title != null) {\n\t\t\t\t rows.push(FXmod.dimensions[i].code)\n\t\t\t\t }\n\t\t\t\t }\n\t\t\t\t if (opt.columns[FXmod.dimensions[i].code]) {\n\t\t\t\t columns.push(FXmod.dimensions[i].label || FXmod.dimensions[i].code)\n\t\t\t\t if (opt.showCode == true && FXmod.dimensions[i].title != FXmod.dimensions[i].code && FXmod.dimensions[i].title != null) {\n\t\t\t\t columns.push(FXmod.dimensions[i].code)\n\t\t\t\t }\n\t\t\t\t }\n\t\t\t\t }\n\t\t\t\t for (var i in FXmod.values) {\n\t\t\t\t if (opt.values[FXmod.values[i].value]) {\n\t\t\t\t values.push(FXmod.values[i].value)\n\t\t\t\t if (opt.showUnit == true && FXmod.values[i].unit) {\n\t\t\t\t values.push(FXmod.values[i].unit);\n\t\t\t\t }\n\t\t\t\t if (opt.showFlag == true && FXmod.values[i].flag) {\n\t\t\t\t values.push(FXmod.values[i].flag);\n\t\t\t\t }\n\t\t\t\t for (var h in FXmod.values[i].attribute) {\n\t\t\t\t hidden.push(FXmod.values[i].attribute[h])\n\t\t\t\t }\n\t\n\t\t\t\t }\n\t\t\t\t }\n\t\t\t\t var retObj = {\n\t\t\t\t hidden: hidden,\n\t\t\t\t rows: rows,\n\t\t\t\t columns: columns,\n\t\t\t\t aggregations: aggregations,\n\t\t\t\t values: values\n\t\t\t\t }\n\t\t\t\t return retObj;*/\n\t\t\t}\n\t\n\t\t\tfunction initFXDgraph(FX, opt) {//for Data for chart\n\t\t\t\t/*  var FXmod = convertFX(FX, opt);\n\t\t\t\t var hidden = [];\n\t\t\t\t var x = [];\n\t\t\t\t var series = [];\n\t\t\t\t var aggregations = [];\n\t\t\t\t var y = [];\n\t\t\t\t for (var i in FXmod.dimensions) {\n\t\t\t\t if (opt.series[FXmod.dimensions[i].code]) {\n\t\t\t\t series.push(FXmod.dimensions[i].label || FXmod.dimensions[i].code)\n\t\t\t\t if (opt.showCode == true && FXmod.dimensions[i].label != FXmod.dimensions[i].code && FXmod.dimensions[i].label != null) {\n\t\t\t\t series.push(FXmod.dimensions[i].code)\n\t\t\t\t }\n\t\t\t\t }\n\t\t\t\t if (opt.x[FXmod.dimensions[i].code]) {\n\t\t\t\t x.push(FXmod.dimensions[i].label || FXmod.dimensions[i].code)\n\t\t\t\t if (opt.showCode == true && FXmod.dimensions[i].label != FXmod.dimensions[i].code && FXmod.dimensions[i].label != null) {\n\t\t\t\t x.push(FXmod.dimensions[i].code);\n\t\t\t\t }\n\t\t\t\t }\n\t\t\t\t }\n\t\t\t\t for (var i in FXmod.values) {\n\t\t\t\t if (opt.y[FXmod.values[i].value]) {\n\t\n\t\t\t\t y.push(FXmod.values[i].value)\n\t\t\t\t if (opt.showUnit == true && FXmod.values[i].unit) {\n\t\t\t\t y.push(FXmod.values[i].unit)\n\t\t\t\t }\n\t\n\t\t\t\t if (opt.showFlag == true && FXmod.values[i].flag) {\n\t\t\t\t y.push(FXmod.values[i].flag)\n\t\t\t\t }\n\t\t\t\t for (var h in FXmod.values[i].attribute) {\n\t\t\t\t hidden.push(FXmod.values[i].attribute[h])\n\t\t\t\t }\n\t\n\t\t\t\t }\n\t\n\t\n\t\t\t\t }\n\t\n\t\n\t\t\t\t var retObj = {\n\t\t\t\t hidden: hidden,\n\t\t\t\t series: series,\n\t\t\t\t x: x,\n\t\t\t\t aggregations: aggregations,\n\t\t\t\t y: y\n\t\t\t\t }\n\t\t\t\t return retObj;*/\n\t\t\t}\n\t\n\t\t\tfunction toFilter(model,opt) {\n\t\n\t\t\t\tvar fxt = initFXT(model.metadata.dsd);\n\t\n\t\n\t\t\t\tvar groupName= {\n\t\t\t\t\trows: \"Rows\",\n\t\t\t\t\tcolumns: \"Columns\",\n\t\t\t\t\thidden :\"Hidden\",\n\t\t\t\t\taggregations: \"Aggregation\",\n\t\t\t\t\tvalues: \"Values\"\n\t\t\t\t}\n\t\t\t\tif(opt){ groupName= {\n\t\t\t\t\trows: opt.rowLabel||\"Rows\",\n\t\t\t\t\tcolumns:opt.columnsLabel|| \"Columns\",\n\t\t\t\t\thidden:opt.hiddenLabel|| \"Hidden\",\n\t\t\t\t\taggregations:opt.aggregationsLabel|| \"Aggregation\",\n\t\t\t\t\tvalues:opt.valuesLabel|| \"Values\"\n\t\t\t\t}}\n\t\n\t\n\t\n\t\t\t\tvar configuration = {\n\t\n\t\t\t\t\tdimensionsSort: {\n\t\t\t\t\t\tselector: {\n\t\t\t\t\t\t\tid: \"sortable\",\n\t\t\t\t\t\t\tsource: [],\n\t\t\t\t\t\t\tconfig: { //SortableJS configuration\n\t\t\t\t\t\t\t\t//disabled: true\n\t\t\t\t\t\t\t\tgroups: groupName\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\n\t\t\t\t\t\ttemplate: {\n\t\t\t\t\t\t\t//\"hideHeader\": true,\n\t\t\t\t\t\t\thideSwitch: true,\n\t\t\t\t\t\t\thideRemoveButton: true,\n\t\t\t\t\t\t\ttitle: \"Sort dimension\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\taggregatorValue: {\n\t\t\t\t\t\tselector: {\n\t\t\t\t\t\t\tid: 'dropdown',\n\t\t\t\t\t\t\tsource: [\n\t\t\t\t\t\t\t\t{value: \"sum\", label: \"Sum\"},\n\t\t\t\t\t\t\t\t{value: \"avg\", label: \"avg\"},\n\t\t\t\t\t\t\t\t{value: \"median\", label: \"median\"},\n\t\t\t\t\t\t\t\t{value: \"stdev\", label: \"stdev\"},\n\t\t\t\t\t\t\t\t{value: \"count\", label: \"count\"},\n\t\t\t\t\t\t\t\t{value: \"concat\", label: \"concat\"},\n\t\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\t\t avg:function(cell,format,nbDec){var a= jStat(cell);return format(a.mean(),nbDec)},\n\t\t\t\t\t\t\t\t median:function(cell,format,nbDec){var a= jStat(cell);return format(a.median(),nbDec)},\n\t\t\t\t\t\t\t\t stdev:function(cell,format,nbDec){var a= jStat(cell);return format(a.stdev(),nbDec)},\n\t\t\t\t\t\t\t\t count:function(cell,format,nbDec){var a= cell;return format(a.length,nbDec)},\n\t\t\t\t\t\t\t\t concat\n\t\n\t\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tconfig: {maxItems: 1},\n\t\t\t\t\t\t\tdefault: ['sum']\n\t\t\t\t\t\t},\n\t\n\t\t\t\t\t\ttemplate: {\n\t\t\t\t\t\t\ttitle: \"Aggregator for Value\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\n\t\t\t\tvar aggregations = _.map(fxt.aggregations, function (item) {\n\t\t\t\t\t\titem.parent = \"aggregations\";\n\t\t\t\t\t\treturn item\n\t\t\t\t\t}),\n\t\t\t\t\tcolumns = _.map(fxt.columns, function (item) {\n\t\t\t\t\t\titem.parent = \"columns\";\n\t\t\t\t\t\treturn item\n\t\t\t\t\t}),\n\t\t\t\t\trows = _.map(fxt.rows, function (item) {\n\t\t\t\t\t\titem.parent = \"rows\";\n\t\t\t\t\t\treturn item\n\t\t\t\t\t}),\n\t\t\t\t\thidden = _.map(fxt.hidden, function (item) {\n\t\n\t\t\t\t\t\titem.parent = \"hidden\";\n\t\t\t\t\t\treturn item\n\t\t\t\t\t}),\n\t\t\t\t\tvalues = _.map(fxt.values, function (item) {\n\t\t\t\t\t\titem.parent = \"values\";\n\t\t\t\t\t\treturn item\n\t\t\t\t\t});\n\t\n\t\t\t\tconfiguration.dimensionsSort.selector.source = _.union(aggregations, hidden, columns, rows, values);\n\t\n\t\t\t\treturn configuration\n\t\n\t\t\t}\n\t\n\t\t\tfunction toChartConfig(values) {\n\t\t\t\tvar hidden = [];\n\t\t\t\tvar x = [];\n\t\t\t\tvar series = [];\n\t\t\t\tvar aggregations = [];\n\t\t\t\tvar y = [];\n\t\t\t\tvar type = Array.isArray(values.values.typeOfChart) ? values.values.typeOfChart[0] : \"line\";\n\t\t\t\tvar aggValue = {\n\t\t\t\t\tvalue: values.values.aggregatorValue[0],\n\t\t\t\t\tValue: values.values.aggregatorValue[0],\n\t\t\t\t\tVALUE: values.values.aggregatorValue[0]\n\t\t\t\t};\n\t\n\t\t\t\t//convert to chart creator configuration here\n\t\t\t\tvar opt = {x: {}, y: {}, series: {}, showUnit: false, showCode: false, showFlag: false};\n\t\t\t\tfor (var i in values.values.show) {\n\t\t\t\t\tvar t = values.values.show[i];\n\t\t\t\t\tif (t == \"code\") {\n\t\t\t\t\t\topt.showCode = true;\n\t\t\t\t\t}\n\t\t\t\t\telse if (t == \"unit\") {\n\t\t\t\t\t\topt.showUnit = true;\n\t\t\t\t\t}\n\t\t\t\t\telse if (t == \"flag\") {\n\t\t\t\t\t\topt.showFlag = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (var i in values.values.dimensionsSort) {\n\t\t\t\t\tvar t = values.values.dimensionsSort[i];\n\t\t\t\t\tif (t.parent == \"rows\") {\n\t\t\t\t\t\topt.series[t.value] = true\n\t\t\t\t\t}\n\t\t\t\t\telse if (t.parent == \"columns\") {\n\t\t\t\t\t\topt.x[t.value] = true\n\t\t\t\t\t}\n\t\t\t\t\telse if (t.parent == \"values\") {\n\t\t\t\t\t\topt.y[t.value] = true\n\t\t\t\t\t}\n\t\t\t\t\telse if (t.parent == \"hidden\") {/* to decide what we want to do*/\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\n\t\t\t\t// for (var i in FXmod.dimensions) {\n\t\t\t\tfor (var ii in values.values.dimensionsSort) {\n\t\t\t\t\tvar i=values.values.dimensionsSort[ii].value;\n\t\n\t\t\t\t\tif (FXmod.dimensions[i] && opt.series[FXmod.dimensions[i].code]) {\n\t\t\t\t\t\tseries.push(FXmod.dimensions[i].label || FXmod.dimensions[i].code)\n\t\t\t\t\t\tif (opt.showCode == true && FXmod.dimensions[i].label != FXmod.dimensions[i].code && FXmod.dimensions[i].label != null) {\n\t\t\t\t\t\t\tseries.push(FXmod.dimensions[i].code)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (FXmod.dimensions[i] && opt.x[FXmod.dimensions[i].code]) {\n\t\t\t\t\t\tx.push(FXmod.dimensions[i].label || FXmod.dimensions[i].code)\n\t\t\t\t\t\tif (opt.showCode == true && FXmod.dimensions[i].label != FXmod.dimensions[i].code && FXmod.dimensions[i].label != null) {\n\t\t\t\t\t\t\tx.push(FXmod.dimensions[i].code);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (var i in FXmod.values) {\n\t\t\t\t\tif (opt.y[FXmod.values[i].value]) {\n\t\t\t\t\t\ty.push(FXmod.values[i].value)\n\t\t\t\t\t\tif (opt.showUnit == true && FXmod.values[i].unit) {\n\t\t\t\t\t\t\ty.push(FXmod.values[i].unit)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (opt.showFlag == true && FXmod.values[i].flag) {\n\t\t\t\t\t\t\ty.push(FXmod.values[i].flag)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (var h in FXmod.values[i].attribute) {\n\t\t\t\t\t\t\thidden.push(FXmod.values[i].attribute[h])\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (var i in FXmod.attributes) {\n\t\n\t\t\t\t\tif (opt.y[FXmod.attributes[i].value]) {\n\t\t\t\t\t\ty.push(FXmod.attributes[i].value);\n\t\t\t\t\t}\n\t\t\t\t\telse if (opt.x[FXmod.attributes[i].value]) {\n\t\t\t\t\t\tx.push(FXmod.attributes[i].value);\n\t\t\t\t\t}\n\t\t\t\t\telse if (opt.series[FXmod.attributes[i].value]) {\n\t\t\t\t\t\tseries.push(FXmod.attributes[i].value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\n\t\t\t\tvar retObj = {\n\t\t\t\t\taggregationFn: aggValue,\n\t\t\t\t\tformatter: \"value\",\n\t\t\t\t\tdecimals: 2,\n\t\t\t\t\thidden: hidden,\n\t\t\t\t\tseries: series,\n\t\t\t\t\tx: x,\n\t\t\t\t\taggregations: aggregations,\n\t\t\t\t\ty: y,\n\t\t\t\t\ttype: type\n\t\t\t\t};\n\t\n\t\t\t\treturn retObj;\n\t\n\t\n\t\t\t}\n\t\n\t\t\tfunction toTableConfig(values) {\n\t\t\t\t//console.log(\"toTableValue\",values)\n\t\t\t\tvar hidden = [];\n\t\t\t\tvar x = [];\n\t\t\t\tvar series = [];\n\t\t\t\tvar aggregations = [];\n\t\t\t\tvar y = [];\n\t\t\t\tvar formatter = values.values.format[0];\n\t\t\t\t//console.log(\"values\",values)\n\t\t\t\tvar groupedRow = true;\n\t\t\t\tif(values.values.hasOwnProperty(\"groupedRow\")) { values.values.groupedRow.length>0?groupedRow=true:groupedRow=false}\n\t//console.log(\"values\",values)\n\t\t\t\tvar aggValue = {value: values.values.aggregatorValue[0], Value: values.values.aggregatorValue[0]}\n\t\t\t\t//convert to chart creator configuration here\n\t\t\t\tvar opt = {x: {}, y: {}, series: {}, showUnit: false, showCode: false, showFlag: false};\n\t\t\t\tfor (var i in values.values.show) {\n\t\t\t\t\tvar t = values.values.show[i];\n\t\t\t\t\tif (t == \"code\") {opt.showCode = true;}\n\t\t\t\t\telse if (t == \"unit\") {opt.showUnit = true;}\n\t\t\t\t\telse if (t == \"flag\") {opt.showFlag = true;}\n\t\t\t\t}\n\t\n\t//console.log(\" values.values.dimensionsSort\", values.values.dimensionsSort)\n\t\t\t\tfor (var i in values.values.dimensionsSort) {\n\t\t\t\t\tvar t = values.values.dimensionsSort[i];\n\t\t\t\t\tif (t.parent == \"rows\") {opt.series[t.value] = true;}\n\t\t\t\t\telse if (t.parent == \"columns\") {opt.x[t.value] = true;}\n\t\t\t\t\telse if (t.parent == \"values\") {opt.y[t.value] = true;}\n\t\t\t\t\telse if (t.parent == \"hidden\") {/* to decide what we want to do*/\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\t//console.log(\"FXmod\", FXmod)\n\t\t\t\t// for (var i in FXmod.dimensions) {\n\t\t\t\tfor (var ii in values.values.dimensionsSort) {\n\t\t\t\t\tvar i=values.values.dimensionsSort[ii].value;\n\t\t\t\t\tif (FXmod.dimensions[i] && opt.series[FXmod.dimensions[i].code]) {\n\t\t\t\t\t\tseries.push(FXmod.dimensions[i].label || FXmod.dimensions[i].code)\n\t\n\t\t\t\t\t\tif (/*opt.showCode == true &&*/ FXmod.dimensions[i].label != FXmod.dimensions[i].code && FXmod.dimensions[i].label != null) {\n\t\t\t\t\t\t\tseries.push(FXmod.dimensions[i].code);\n\t\t\t\t\t\t\tif (opt.showCode == false){ hidden.push(FXmod.dimensions[i].code);}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{}\n\t\t\t\t\t}\n\t\t\t\t\tif (FXmod.dimensions[i] && opt.x[FXmod.dimensions[i].code]) {\n\t\t\t\t\t\tx.push(FXmod.dimensions[i].label || FXmod.dimensions[i].code)\n\t\t\t\t\t\tif (/*opt.showCode == true &&*/ FXmod.dimensions[i].label != FXmod.dimensions[i].code && FXmod.dimensions[i].label != null) {\n\t\t\t\t\t\t\tx.push(FXmod.dimensions[i].code);\n\t\t\t\t\t\t\tif (opt.showCode == false){ hidden.push(FXmod.dimensions[i].code);}\n\t\t\t\t\t\t}else{}\n\t\t\t\t\t}\n\t\t\t\t\tif (FXmod.dimensions[i] && opt.y[FXmod.dimensions[i].code]) {\n\t\t\t\t\t\ty.push(FXmod.dimensions[i].code);\n\t\t\t\t\t}else{\n\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tfor (var i in FXmod.values) {\n\t\t\t\t\tif (opt.y[FXmod.values[i].value]) {\n\t\t\t\t\t\ty.push(FXmod.values[i].value)\n\t\t\t\t\t\tif (opt.showUnit == true && FXmod.values[i].unit) {\n\t\t\t\t\t\t\ty.push(FXmod.values[i].unit)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (opt.showFlag == true && FXmod.values[i].flag) {\n\t\t\t\t\t\t\ty.push(FXmod.values[i].flag)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (var h in FXmod.values[i].attribute) {\n\t\t\t\t\t\t\thidden.push(FXmod.values[i].attribute[h])\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tfor (var i in FXmod.attributes) {\n\t\n\t\t\t\t\tif (opt.y[FXmod.attributes[i].value]) {\n\t\t\t\t\t\ty.push(FXmod.attributes[i].label || FXmod.attributes[i].value);\n\t\t\t\t\t}\n\t\t\t\t\telse if (opt.x[FXmod.attributes[i].value]) {\n\t\t\t\t\t\tx.push(FXmod.attributes[i].label || FXmod.attributes[i].value);\n\t\t\t\t\t}\n\t\t\t\t\telse if (opt.series[FXmod.attributes[i].value]) {\n\t\t\t\t\t\tseries.push(FXmod.attributes[i].label || FXmod.attributes[i].value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t//console.log(\"V\",values.values)\n\t\t\t\tvar retObj = {groupedRow:groupedRow,\n\t\t\t\t\taggregationFn: aggValue,\n\t\t\t\t\tformatter: formatter,\n\t\t\t\t\tdecimals: values.values.decimals||2,\n\t\t\t\t\tshowRowHeaders: true,\n\t\t\t\t\thidden: hidden,\n\t\t\t\t\trows: series,\n\t\t\t\t\tcolumns: x,\n\t\t\t\t\taggregations: aggregations,\n\t\t\t\t\tvalues: y\n\t\t\t\t}\n\t\t\t\t//console.log(\"rest\",retObj)\n\t\t\t\treturn retObj;\n\t\n\t\n\t\t\t}\n\t\n\t\t\treturn function () {\n\t\t\t\treturn {\n\t\t\t\t\tconvertFX: convertFX,\n\t\t\t\t\tinitFXT: initFXT,\n\t\t\t\t\tinitFXD: initFXD,\n\t\t\t\t\tinitFXDgraph: initFXDgraph,\n\t\t\t\t\tparseInput: parseInput,\n\t\t\t\t\ttoFilter: toFilter,\n\t\t\t\t\ttoChartConfig: toChartConfig,\n\t\t\t\t\ttoTableConfig: toTableConfig\n\t\t\t\t}\n\t\t\t};\n\t\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n/***/ }\n/******/ ])});;\n\n\n/** WEBPACK FOOTER **\n ** fenix-ui-pivotator-utils.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap b8eccd7310e7bd4f8dfa\n **/","if (typeof define !== 'function') {\n\tvar define = require('amdefine')(module);\n}\n\ndefine([\n\t\t\"underscore\"\n\t], function (_) {\n\n\n\t\tvar FXmod;\n\n\t\tfunction parseInput(FX, opt) {// FX.metadata.dsd,options\n\t\t\tvar ret = {};\n\t\t\t_.extend(ret, opt);\n\n\t\t\tvar FXmod = convertFXDirty(FX, opt);\n\n\t\t\tfunction getDimension()\n\t\t\t{var ret=[];\n\t\t\t\tfor(var i in FXmod.dimensions)\n\t\t\t\t{\n\t\t\t\t\tret.push(i)\n\t\t\t\t}\n\t\t\t\treturn ret\n\t\t\t}\n\n\t\t\tfunction getListDim(arr, opt, FXmod) {\n\t\t\t\tvar showCode = opt.showCode;\n\t\t\t\tvar ret = [];\n\t\t\t\tfor (var i in arr) {\n\t\t\t\t\tif (showCode && FXmod.dimensions[arr[i]].label) {ret.push(FXmod.dimensions[arr[i]].code);}\n\t\t\t\t\t//    console.log(arr[i],FXmod.dimensions,FXmod.dimensions[arr[i]]);\n\n\t\t\t\t\tret.push(FXmod.dimensions[arr[i]].label || FXmod.dimensions[arr[i]].code)\n\t\t\t\t}\n\t\t\t\treturn ret\n\t\t\t}\n\n\t\t\tif (opt.inputFormat == \"fenixtool\") {\n\n\t\t\t\tvar lang = \"EN\";\n\t\t\t\tif (opt.lang) {lang = opt.lang;}\n\t\t\t\tvar aggregations = [],\n\t\t\t\t\thidden = [],\n\t\t\t\t\tcolumns = [],\n\t\t\t\t\trows = [],\n\t\t\t\t\tvalues = [];\n\n\n\n\t\t\t\tconsole.log(\"initRow\",opt)\n\n\t\t\t\tret = {\n\t\t\t\t\t\"inputFormat\": \"fenixTool\",\n\t\t\t\t\t\"aggregationFn\": opt.aggregationFn || {\"value\": \"sum\"},\n\t\t\t\t\t\"aggregations\": getListDim(opt.aggregations, opt, FXmod),\n\t\t\t\t\t\"hidden\": getListDim(opt.hidden, opt, FXmod),\n\t\t\t\t\t\"columns\": getListDim(opt.columns, opt, FXmod),\n\t\t\t\t\t\"values\": opt.values||\"value\",\n\t\t\t\t\t\"groupedRow\": opt.groupedRow,\n\t\t\t\t\t\"rows\":getListDim(opt.rows, opt, FXmod) ,\n\t\t\t\t\t\"formatter\": opt.formatter || \"value\",\n\t\t\t\t\t\"showRowHeaders\": opt.showRowHeaders || false,\n\t\t\t\t\t\"decimals\": opt.decimals || 2,\n\t\t\t\t\t\"showCode\": opt.showCode || false,\n\t\t\t\t\t\"showFlag\": opt.showFlag || false,\n\t\t\t\t\t\"showUnit\": opt.showUnit || false\n\t\t\t\t};\n\n\n\t\t\t}\n\t\t\tif(ret.columns.length+ret.rows.length==0)\n\t\t\t{\n\t\t\t\t//console.log(\"FXmod\",getDimension())\n\t\t\t\tret.rows=getListDim(getDimension(),opt,FXmod)\n\n\t\t\t}\n\t\t\treturn ret\n\t\t}\n\n\t\tfunction convertFX(FX, opt) {\n\t\t\t//console.log(\"FX\", FX)\n\t\t\tvar lang = \"EN\";\n\t\t\tif (opt && opt.hasOwnProperty(\"lang\")) {\n\t\t\t\tlang = opt.lang;\n\t\t\t}\n\t\t\tvar structInter = {dimensions: {}, values: {}}\n\n\t\t\tfunction setDimension(id, att, val, subject) {\n\t\t\t\tif (!structInter.dimensions[id]) {\n\t\t\t\t\tstructInter.dimensions[id] = {};\n\t\t\t\t}\n\t\t\t\tstructInter.dimensions[id][att] = val;\n\t\t\t\tif (subject) {structInter.dimensions[id][\"subject\"] = subject;}\n\t\t\t}\n\n\t\t\tfunction setAttribute(id, att, val, subject) {\n\t\t\t\tif (!structInter.attribute[id]) {\n\t\t\t\t\tstructInter.attribute[id] = {};\n\t\t\t\t}\n\t\t\t\tstructInter.attribute[id][att] = val;\n\t\t\t\tif (subject) {\n\t\t\t\t\tstructInter.attribute[id][\"subject\"] = subject;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction setValue(id, att, val) {\n\t\t\t\tif (!structInter.values[id]) {\n\t\t\t\t\tstructInter.values[id] = {};\n\t\t\t\t}\n\t\t\t\tif (att != \"attribute\") {\n\t\t\t\t\tstructInter.values[id][att] = val;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (!structInter.values[id][\"attributes\"]) {\n\t\t\t\t\t\tstructInter.values[id][\"attributes\"] = [];\n\t\t\t\t\t}\n\t\t\t\t\tstructInter.values[id][\"attributes\"].push(val);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var i in FX.columns) {\n\t\t\t\tvar myColumns = FX.columns[i];\n\t\t\t\tif (myColumns.key == true) {//c est le code\n\t\t\t\t\tsetDimension(myColumns.id, \"title\", myColumns.title[lang] || myColumns.id);\n\t\t\t\t\tsetDimension(myColumns.id, \"code\", myColumns.id, myColumns.subject);\n\t\t\t\t}\n\t\t\t\telse if (myColumns.id.split(\"_\" + lang).length == 2) {//label\n\t\t\t\t\tsetDimension(myColumns.id.split(\"_\" + lang)[0], \"label\", myColumns.id)\n\t\t\t\t\t/*\tif(!structInter.dimensions[myColumns.id.split(\"_\" + lang)[0]]){\n\t\t\t\t\t setDimension(myColumns.id, \"title\", myColumns.id.split(\"_\" + lang)[0]);\n\t\t\t\t\t setDimension(myColumns.id, \"code\",myColumns.id.split(\"_\" + lang)[0]);}*/\n\t\t\t\t}\n\t\t\t\telse if (myColumns.dataType == \"number\" && myColumns.subject == \"value\") {\n\t\t\t\t\tsetValue(myColumns.id, \"value\", myColumns.id);\n\t\t\t\t\tsetValue(myColumns.id, \"label\", myColumns.id);\n\t\t\t\t\tsetValue(myColumns.id, \"subject\", myColumns.subject);\n\t\t\t\t}\n\t\t\t\telse if (myColumns.id.split(\"|*\").length == 2) {//attribut d une valeur X\n\t\t\t\t\tif (myColumns.subject == \"um\") {\n\t\t\t\t\t\tsetValue(myColumns.id.split(\"|*\")[0], \"unit\", myColumns.id)\n\t\t\t\t\t}\n\t\t\t\t\telse if (myColumns.subject == \"flag\") {\n\t\t\t\t\t\tsetValue(myColumns.id.split(\"|*\")[0], \"flag\", myColumns.id);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tsetValue(myColumns.id.split(\"|*\")[0], \"attributes\", myColumns.id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {//attribut de value\n\t\t\t\t\tif (myColumns.subject == \"um\") {\n\t\t\t\t\t\tsetValue(\"value\", \"unit\", myColumns.id);\n\t\t\t\t\t}\n\t\t\t\t\telse if (myColumns.subject == \"flag\") {\n\t\t\t\t\t\tsetValue(\"value\", \"flag\", myColumns.id);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// setDimension(myColumns.id, \"label\", myColumns.title[lang]||myColumns.id);\n\t\t\t\t\t\t//  setDimension(myColumns.id, \"code\", myColumns.id, myColumns.subject);\n\n\t\t\t\t\t\t//setAttribute(myColumns.id, \"id\", myColumns.id)\n\n\t\t\t\t\t\tsetValue(\"value\", \"attribute\", myColumns.id)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n//\t\t\tfor()\n\t\t\t//console.log(\"structInter\", structInter)\n\t\t\treturn structInter;\n\t\t}\n\n\t\tfunction convertFXDirty(FX, opt) {\n\t\t\t//console.log(\"FXDIRTY \",FX);\n\t\t\tvar structInter = {dimensions: {}, values: {}, attributes: {}}\n\t\t\tvar structDirty = {};\n\n\t\t\tvar lang = \"EN\";\n\t\t\tif (opt && opt.lang) {\n\t\t\t\tlang = opt.lang;\n\t\t\t}\n\n\t\t\tfunction setDirty(id, field, val) {\n\t\t\t\tif (!structDirty[id]) {\n\t\t\t\t\tstructDirty[id] = {};\n\t\t\t\t}\n\t\t\t\tif (field == \"attributes\") {\n\t\t\t\t\tif (structDirty[id][field]) {\n\t\t\t\t\t\tstructDirty[id][field].push(val);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tstructDirty[id][field] = [val];\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tstructDirty[id][field] = val;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var i in FX.columns) {\n\t\t\t\tvar myColumns = FX.columns[i];\n\t\t\t\tif (myColumns.key == true) {//c est le code\n\t\t\t\t\tsetDirty(myColumns.id, \"code\", myColumns.id);\n\t\t\t\t\tsetDirty(myColumns.id, \"title\", myColumns.title[lang] || myColumns.id);\n\t\t\t\t\tsetDirty(myColumns.id, \"type\", \"dimension\");\n\t\t\t\t\tif (myColumns.subject) {\n\t\t\t\t\t\tsetDirty(myColumns.id, \"subject\", myColumns.subject);\n\t\t\t\t\t}\n\n\t\t\t\t\t/*setDimension(myColumns.id, \"title\", myColumns.title[lang]||myColumns.id);\n\t\t\t\t\t setDimension(myColumns.id, \"code\", myColumns.id, myColumns.subject);*/\n\t\t\t\t}\n\t\t\t\telse if (myColumns.id.split(\"_\" + lang).length == 2) {//label\n\t\t\t\t\tsetDirty(myColumns.id.split(\"_\" + lang)[0], \"label\", myColumns.id);\n\t\t\t\t\t//setDimension(myColumns.id.split(\"_\" + lang)[0], \"label\", myColumns.id)\n\n\t\t\t\t}\n\t\t\t\telse if (myColumns.dataType == \"number\" && myColumns.subject == \"value\") {\n\n\t\t\t\t\t/* setDirty(myColumns.id.toLowerCase(), \"type\", \"value\");\n\t\t\t\t\t setDirty(myColumns.id.toLowerCase(), \"value\", myColumns.id);\n\t\t\t\t\t setDirty(myColumns.id.toLowerCase(), \"title\", myColumns.id);\n\t\t\t\t\t */\n\t\t\t\t\t//console.log(myColumns)\n\t\t\t\t\tsetDirty(\"value\", \"type\", \"value\");\n\t\t\t\t\tsetDirty(\"value\", \"value\", myColumns.id);\n\t\t\t\t\tsetDirty(\"value\", \"title\", \"value\" || myColumns.title[lang] || myColumns.id);\n\n\t\t\t\t\tif (myColumns.subject) {\n\t\t\t\t\t\t// setDirty(myColumns.id.toLowerCase(), \"subject\", myColumns.subject);\n\t\t\t\t\t\tsetDirty(\"value\", \"subject\", myColumns.subject);\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (myColumns.id.split(\"|*\").length == 2) {//attribut d une valeur X\n\t\t\t\t\tif (myColumns.subject == \"um\") {\n\t\t\t\t\t\tsetDirty(myColumns.id.split(\"|*\")[0], \"unit\", myColumns.id);\n\t\t\t\t\t}\n\t\t\t\t\telse if (myColumns.subject == \"flag\") {\n\t\t\t\t\t\tsetDirty(myColumns.id.split(\"|*\")[0], \"flag\", myColumns.id);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tsetDirty(myColumns.id.split(\"|*\")[0], \"attributes\", myColumns.id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {//attribut de value\n\n\t\t\t\t\tif (myColumns.subject == \"um\") {\n\t\t\t\t\t\t//setValue(\"value\", \"unit\", myColumns.id);\n\t\t\t\t\t\tsetDirty(myColumns.id, \"type\", \"attribute\");\n\t\t\t\t\t\tsetDirty(myColumns.id, \"value\", myColumns.id);\n\t\t\t\t\t\tsetDirty(myColumns.id, \"title\", \"unit\");\n\t\t\t\t\t\tif (myColumns.subject) {\n\t\t\t\t\t\t\tsetDirty(myColumns.id, \"subject\", myColumns.subject);\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\t//\n\t\t\t\t\t\tsetDirty(\"value\", \"unit\", myColumns.id)\n\t\t\t\t\t}\n\t\t\t\t\telse if (myColumns.subject == \"flag\") {\n\t\t\t\t\t\t//setValue(\"value\", \"flag\", myColumns.id);\n\t\t\t\t\t\tsetDirty(\"value\", \"flag\", myColumns.id)\n\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t//// setDimension(myColumns.id, \"label\", myColumns.title[lang]||myColumns.id);\n\t\t\t\t\t\t////  setDimension(myColumns.id, \"code\", myColumns.id, myColumns.subject);\n\t\t\t\t\t\t////setAttribute(myColumns.id, \"id\", myColumns.id)\n\n\t\t\t\t\t\t//setValue(\"value\", \"attribute\", myColumns.id)\n\t\t\t\t\t\tsetDirty(myColumns.id, \"type\", \"attribute\");\n\t\t\t\t\t\tsetDirty(myColumns.id, \"value\", myColumns.id);\n\t\t\t\t\t\tsetDirty(myColumns.id, \"title\", myColumns.title[lang] || myColumns.id);\n\t\t\t\t\t\tif (myColumns.subject) {\n\t\t\t\t\t\t\tsetDirty(myColumns.id, \"subject\", myColumns.subject);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//console.log(\"FXDIRTY interm \",structDirty);\n\t\t\tfor (var i in structDirty) {\n\t\t\t\tif (structDirty[i].type == \"dimension\") {\n\t\t\t\t\tstructInter.dimensions[i] = structDirty[i];\n\t\t\t\t}\n\t\t\t\telse if (structDirty[i].type == \"value\") {\n\t\t\t\t\tstructInter.values[i] = structDirty[i];\n\t\t\t\t}\n\n\t\t\t\telse {\n\t\t\t\t\tstructInter.attributes[i] = structDirty[i];\n\t\t\t\t\tif ( structDirty[i].subject == \"um\") {\n\n\t\t\t\t\t\t//console.log(\"strucInter\",structInter,structDirty)\n\t\t\t\t\t\tstructInter.values.value.unit= structDirty[i].label || structDirty[i].value;\n\t\t\t\t\t\t//setDirty(\"value\", \"unit\", myColumns.id);\n\t\t\t\t\t\t//structInter.values[i].unit = structDirty[i];\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\t//console.log(\"structInterDirty\",structDirty,\"structInter\",structInter);\n\t\t\t//console.log(\"FXDIRTY return \",structInter);\n\n\t\t\treturn structInter;\n\t\t}\n\n\n\t\tfunction initFXT(FX, opt) {//for Toolbar\n\n\t\t\t// var FXmodold = convertFX(FX, opt);\n\t\t\tvar FXmodnew = convertFXDirty(FX, opt);\n\n\t\t\tFXmod = FXmodnew;\n\n\t\t\tvar hidden = [];\n\t\t\tvar columns = [];\n\t\t\tvar rows = [];\n\t\t\tvar aggregations = [];\n\t\t\tvar values = [];\n\n\t\t\tfor (var i in FXmod.dimensions) {\n\t\t\t\tif (FXmod.dimensions[i].subject == \"time\") {\n\t\t\t\t\tcolumns.push({value: FXmod.dimensions[i].code, label: FXmod.dimensions[i].title});\n\n\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\trows.push({value: FXmod.dimensions[i].code, label: FXmod.dimensions[i].title});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var i in FXmod.values) {\n\t\t\t\tvalues.push({value: FXmod.values[i].value, label: FXmod.values[i].title});\n\t\t\t}\n\t\t\tfor (var i in FXmod.attributes) {\n\n\t\t\t\taggregations.push({value: FXmod.attributes[i].value, label: FXmod.attributes[i].title});\n\t\t\t}\n\n\t\t\tvar retObj = {\n\t\t\t\thidden: hidden,\n\t\t\t\trows: rows,\n\t\t\t\tcolumns: columns,\n\t\t\t\taggregations: aggregations,\n\t\t\t\tvalues: values\n\t\t\t}\n\t\t\t//           console.log(retObj)\n\t\t\treturn retObj;\n\t\t}\n\n\t\tfunction initFXD(FX, opt) {//for Data\n\t\t\t/*  var FXmod = convertFX(FX, opt);\n\t\t\t var hidden = [];\n\t\t\t var columns = [];\n\t\t\t var rows = [];\n\t\t\t var aggregations = [];\n\t\t\t var values = [];\n\t\t\t for (var i in FXmod.dimensions) {\n\t\t\t if (opt.rows[FXmod.dimensions[i].code]) {\n\t\t\t rows.push(FXmod.dimensions[i].label || FXmod.dimensions[i].code)\n\t\t\t if (opt.showCode == true && FXmod.dimensions[i].title != FXmod.dimensions[i].code && FXmod.dimensions[i].title != null) {\n\t\t\t rows.push(FXmod.dimensions[i].code)\n\t\t\t }\n\t\t\t }\n\t\t\t if (opt.columns[FXmod.dimensions[i].code]) {\n\t\t\t columns.push(FXmod.dimensions[i].label || FXmod.dimensions[i].code)\n\t\t\t if (opt.showCode == true && FXmod.dimensions[i].title != FXmod.dimensions[i].code && FXmod.dimensions[i].title != null) {\n\t\t\t columns.push(FXmod.dimensions[i].code)\n\t\t\t }\n\t\t\t }\n\t\t\t }\n\t\t\t for (var i in FXmod.values) {\n\t\t\t if (opt.values[FXmod.values[i].value]) {\n\t\t\t values.push(FXmod.values[i].value)\n\t\t\t if (opt.showUnit == true && FXmod.values[i].unit) {\n\t\t\t values.push(FXmod.values[i].unit);\n\t\t\t }\n\t\t\t if (opt.showFlag == true && FXmod.values[i].flag) {\n\t\t\t values.push(FXmod.values[i].flag);\n\t\t\t }\n\t\t\t for (var h in FXmod.values[i].attribute) {\n\t\t\t hidden.push(FXmod.values[i].attribute[h])\n\t\t\t }\n\n\t\t\t }\n\t\t\t }\n\t\t\t var retObj = {\n\t\t\t hidden: hidden,\n\t\t\t rows: rows,\n\t\t\t columns: columns,\n\t\t\t aggregations: aggregations,\n\t\t\t values: values\n\t\t\t }\n\t\t\t return retObj;*/\n\t\t}\n\n\t\tfunction initFXDgraph(FX, opt) {//for Data for chart\n\t\t\t/*  var FXmod = convertFX(FX, opt);\n\t\t\t var hidden = [];\n\t\t\t var x = [];\n\t\t\t var series = [];\n\t\t\t var aggregations = [];\n\t\t\t var y = [];\n\t\t\t for (var i in FXmod.dimensions) {\n\t\t\t if (opt.series[FXmod.dimensions[i].code]) {\n\t\t\t series.push(FXmod.dimensions[i].label || FXmod.dimensions[i].code)\n\t\t\t if (opt.showCode == true && FXmod.dimensions[i].label != FXmod.dimensions[i].code && FXmod.dimensions[i].label != null) {\n\t\t\t series.push(FXmod.dimensions[i].code)\n\t\t\t }\n\t\t\t }\n\t\t\t if (opt.x[FXmod.dimensions[i].code]) {\n\t\t\t x.push(FXmod.dimensions[i].label || FXmod.dimensions[i].code)\n\t\t\t if (opt.showCode == true && FXmod.dimensions[i].label != FXmod.dimensions[i].code && FXmod.dimensions[i].label != null) {\n\t\t\t x.push(FXmod.dimensions[i].code);\n\t\t\t }\n\t\t\t }\n\t\t\t }\n\t\t\t for (var i in FXmod.values) {\n\t\t\t if (opt.y[FXmod.values[i].value]) {\n\n\t\t\t y.push(FXmod.values[i].value)\n\t\t\t if (opt.showUnit == true && FXmod.values[i].unit) {\n\t\t\t y.push(FXmod.values[i].unit)\n\t\t\t }\n\n\t\t\t if (opt.showFlag == true && FXmod.values[i].flag) {\n\t\t\t y.push(FXmod.values[i].flag)\n\t\t\t }\n\t\t\t for (var h in FXmod.values[i].attribute) {\n\t\t\t hidden.push(FXmod.values[i].attribute[h])\n\t\t\t }\n\n\t\t\t }\n\n\n\t\t\t }\n\n\n\t\t\t var retObj = {\n\t\t\t hidden: hidden,\n\t\t\t series: series,\n\t\t\t x: x,\n\t\t\t aggregations: aggregations,\n\t\t\t y: y\n\t\t\t }\n\t\t\t return retObj;*/\n\t\t}\n\n\t\tfunction toFilter(model,opt) {\n\n\t\t\tvar fxt = initFXT(model.metadata.dsd);\n\n\n\t\t\tvar groupName= {\n\t\t\t\trows: \"Rows\",\n\t\t\t\tcolumns: \"Columns\",\n\t\t\t\thidden :\"Hidden\",\n\t\t\t\taggregations: \"Aggregation\",\n\t\t\t\tvalues: \"Values\"\n\t\t\t}\n\t\t\tif(opt){ groupName= {\n\t\t\t\trows: opt.rowLabel||\"Rows\",\n\t\t\t\tcolumns:opt.columnsLabel|| \"Columns\",\n\t\t\t\thidden:opt.hiddenLabel|| \"Hidden\",\n\t\t\t\taggregations:opt.aggregationsLabel|| \"Aggregation\",\n\t\t\t\tvalues:opt.valuesLabel|| \"Values\"\n\t\t\t}}\n\n\n\n\t\t\tvar configuration = {\n\n\t\t\t\tdimensionsSort: {\n\t\t\t\t\tselector: {\n\t\t\t\t\t\tid: \"sortable\",\n\t\t\t\t\t\tsource: [],\n\t\t\t\t\t\tconfig: { //SortableJS configuration\n\t\t\t\t\t\t\t//disabled: true\n\t\t\t\t\t\t\tgroups: groupName\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\n\t\t\t\t\ttemplate: {\n\t\t\t\t\t\t//\"hideHeader\": true,\n\t\t\t\t\t\thideSwitch: true,\n\t\t\t\t\t\thideRemoveButton: true,\n\t\t\t\t\t\ttitle: \"Sort dimension\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\taggregatorValue: {\n\t\t\t\t\tselector: {\n\t\t\t\t\t\tid: 'dropdown',\n\t\t\t\t\t\tsource: [\n\t\t\t\t\t\t\t{value: \"sum\", label: \"Sum\"},\n\t\t\t\t\t\t\t{value: \"avg\", label: \"avg\"},\n\t\t\t\t\t\t\t{value: \"median\", label: \"median\"},\n\t\t\t\t\t\t\t{value: \"stdev\", label: \"stdev\"},\n\t\t\t\t\t\t\t{value: \"count\", label: \"count\"},\n\t\t\t\t\t\t\t{value: \"concat\", label: \"concat\"},\n\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\t avg:function(cell,format,nbDec){var a= jStat(cell);return format(a.mean(),nbDec)},\n\t\t\t\t\t\t\t median:function(cell,format,nbDec){var a= jStat(cell);return format(a.median(),nbDec)},\n\t\t\t\t\t\t\t stdev:function(cell,format,nbDec){var a= jStat(cell);return format(a.stdev(),nbDec)},\n\t\t\t\t\t\t\t count:function(cell,format,nbDec){var a= cell;return format(a.length,nbDec)},\n\t\t\t\t\t\t\t concat\n\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t],\n\t\t\t\t\t\tconfig: {maxItems: 1},\n\t\t\t\t\t\tdefault: ['sum']\n\t\t\t\t\t},\n\n\t\t\t\t\ttemplate: {\n\t\t\t\t\t\ttitle: \"Aggregator for Value\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar aggregations = _.map(fxt.aggregations, function (item) {\n\t\t\t\t\titem.parent = \"aggregations\";\n\t\t\t\t\treturn item\n\t\t\t\t}),\n\t\t\t\tcolumns = _.map(fxt.columns, function (item) {\n\t\t\t\t\titem.parent = \"columns\";\n\t\t\t\t\treturn item\n\t\t\t\t}),\n\t\t\t\trows = _.map(fxt.rows, function (item) {\n\t\t\t\t\titem.parent = \"rows\";\n\t\t\t\t\treturn item\n\t\t\t\t}),\n\t\t\t\thidden = _.map(fxt.hidden, function (item) {\n\n\t\t\t\t\titem.parent = \"hidden\";\n\t\t\t\t\treturn item\n\t\t\t\t}),\n\t\t\t\tvalues = _.map(fxt.values, function (item) {\n\t\t\t\t\titem.parent = \"values\";\n\t\t\t\t\treturn item\n\t\t\t\t});\n\n\t\t\tconfiguration.dimensionsSort.selector.source = _.union(aggregations, hidden, columns, rows, values);\n\n\t\t\treturn configuration\n\n\t\t}\n\n\t\tfunction toChartConfig(values) {\n\t\t\tvar hidden = [];\n\t\t\tvar x = [];\n\t\t\tvar series = [];\n\t\t\tvar aggregations = [];\n\t\t\tvar y = [];\n\t\t\tvar type = Array.isArray(values.values.typeOfChart) ? values.values.typeOfChart[0] : \"line\";\n\t\t\tvar aggValue = {\n\t\t\t\tvalue: values.values.aggregatorValue[0],\n\t\t\t\tValue: values.values.aggregatorValue[0],\n\t\t\t\tVALUE: values.values.aggregatorValue[0]\n\t\t\t};\n\n\t\t\t//convert to chart creator configuration here\n\t\t\tvar opt = {x: {}, y: {}, series: {}, showUnit: false, showCode: false, showFlag: false};\n\t\t\tfor (var i in values.values.show) {\n\t\t\t\tvar t = values.values.show[i];\n\t\t\t\tif (t == \"code\") {\n\t\t\t\t\topt.showCode = true;\n\t\t\t\t}\n\t\t\t\telse if (t == \"unit\") {\n\t\t\t\t\topt.showUnit = true;\n\t\t\t\t}\n\t\t\t\telse if (t == \"flag\") {\n\t\t\t\t\topt.showFlag = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (var i in values.values.dimensionsSort) {\n\t\t\t\tvar t = values.values.dimensionsSort[i];\n\t\t\t\tif (t.parent == \"rows\") {\n\t\t\t\t\topt.series[t.value] = true\n\t\t\t\t}\n\t\t\t\telse if (t.parent == \"columns\") {\n\t\t\t\t\topt.x[t.value] = true\n\t\t\t\t}\n\t\t\t\telse if (t.parent == \"values\") {\n\t\t\t\t\topt.y[t.value] = true\n\t\t\t\t}\n\t\t\t\telse if (t.parent == \"hidden\") {/* to decide what we want to do*/\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\t// for (var i in FXmod.dimensions) {\n\t\t\tfor (var ii in values.values.dimensionsSort) {\n\t\t\t\tvar i=values.values.dimensionsSort[ii].value;\n\n\t\t\t\tif (FXmod.dimensions[i] && opt.series[FXmod.dimensions[i].code]) {\n\t\t\t\t\tseries.push(FXmod.dimensions[i].label || FXmod.dimensions[i].code)\n\t\t\t\t\tif (opt.showCode == true && FXmod.dimensions[i].label != FXmod.dimensions[i].code && FXmod.dimensions[i].label != null) {\n\t\t\t\t\t\tseries.push(FXmod.dimensions[i].code)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (FXmod.dimensions[i] && opt.x[FXmod.dimensions[i].code]) {\n\t\t\t\t\tx.push(FXmod.dimensions[i].label || FXmod.dimensions[i].code)\n\t\t\t\t\tif (opt.showCode == true && FXmod.dimensions[i].label != FXmod.dimensions[i].code && FXmod.dimensions[i].label != null) {\n\t\t\t\t\t\tx.push(FXmod.dimensions[i].code);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (var i in FXmod.values) {\n\t\t\t\tif (opt.y[FXmod.values[i].value]) {\n\t\t\t\t\ty.push(FXmod.values[i].value)\n\t\t\t\t\tif (opt.showUnit == true && FXmod.values[i].unit) {\n\t\t\t\t\t\ty.push(FXmod.values[i].unit)\n\t\t\t\t\t}\n\t\t\t\t\tif (opt.showFlag == true && FXmod.values[i].flag) {\n\t\t\t\t\t\ty.push(FXmod.values[i].flag)\n\t\t\t\t\t}\n\t\t\t\t\tfor (var h in FXmod.values[i].attribute) {\n\t\t\t\t\t\thidden.push(FXmod.values[i].attribute[h])\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (var i in FXmod.attributes) {\n\n\t\t\t\tif (opt.y[FXmod.attributes[i].value]) {\n\t\t\t\t\ty.push(FXmod.attributes[i].value);\n\t\t\t\t}\n\t\t\t\telse if (opt.x[FXmod.attributes[i].value]) {\n\t\t\t\t\tx.push(FXmod.attributes[i].value);\n\t\t\t\t}\n\t\t\t\telse if (opt.series[FXmod.attributes[i].value]) {\n\t\t\t\t\tseries.push(FXmod.attributes[i].value);\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tvar retObj = {\n\t\t\t\taggregationFn: aggValue,\n\t\t\t\tformatter: \"value\",\n\t\t\t\tdecimals: 2,\n\t\t\t\thidden: hidden,\n\t\t\t\tseries: series,\n\t\t\t\tx: x,\n\t\t\t\taggregations: aggregations,\n\t\t\t\ty: y,\n\t\t\t\ttype: type\n\t\t\t};\n\n\t\t\treturn retObj;\n\n\n\t\t}\n\n\t\tfunction toTableConfig(values) {\n\t\t\t//console.log(\"toTableValue\",values)\n\t\t\tvar hidden = [];\n\t\t\tvar x = [];\n\t\t\tvar series = [];\n\t\t\tvar aggregations = [];\n\t\t\tvar y = [];\n\t\t\tvar formatter = values.values.format[0];\n\t\t\t//console.log(\"values\",values)\n\t\t\tvar groupedRow = true;\n\t\t\tif(values.values.hasOwnProperty(\"groupedRow\")) { values.values.groupedRow.length>0?groupedRow=true:groupedRow=false}\n//console.log(\"values\",values)\n\t\t\tvar aggValue = {value: values.values.aggregatorValue[0], Value: values.values.aggregatorValue[0]}\n\t\t\t//convert to chart creator configuration here\n\t\t\tvar opt = {x: {}, y: {}, series: {}, showUnit: false, showCode: false, showFlag: false};\n\t\t\tfor (var i in values.values.show) {\n\t\t\t\tvar t = values.values.show[i];\n\t\t\t\tif (t == \"code\") {opt.showCode = true;}\n\t\t\t\telse if (t == \"unit\") {opt.showUnit = true;}\n\t\t\t\telse if (t == \"flag\") {opt.showFlag = true;}\n\t\t\t}\n\n//console.log(\" values.values.dimensionsSort\", values.values.dimensionsSort)\n\t\t\tfor (var i in values.values.dimensionsSort) {\n\t\t\t\tvar t = values.values.dimensionsSort[i];\n\t\t\t\tif (t.parent == \"rows\") {opt.series[t.value] = true;}\n\t\t\t\telse if (t.parent == \"columns\") {opt.x[t.value] = true;}\n\t\t\t\telse if (t.parent == \"values\") {opt.y[t.value] = true;}\n\t\t\t\telse if (t.parent == \"hidden\") {/* to decide what we want to do*/\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//console.log(\"FXmod\", FXmod)\n\t\t\t// for (var i in FXmod.dimensions) {\n\t\t\tfor (var ii in values.values.dimensionsSort) {\n\t\t\t\tvar i=values.values.dimensionsSort[ii].value;\n\t\t\t\tif (FXmod.dimensions[i] && opt.series[FXmod.dimensions[i].code]) {\n\t\t\t\t\tseries.push(FXmod.dimensions[i].label || FXmod.dimensions[i].code)\n\n\t\t\t\t\tif (/*opt.showCode == true &&*/ FXmod.dimensions[i].label != FXmod.dimensions[i].code && FXmod.dimensions[i].label != null) {\n\t\t\t\t\t\tseries.push(FXmod.dimensions[i].code);\n\t\t\t\t\t\tif (opt.showCode == false){ hidden.push(FXmod.dimensions[i].code);}\n\t\t\t\t\t}\n\t\t\t\t\telse{}\n\t\t\t\t}\n\t\t\t\tif (FXmod.dimensions[i] && opt.x[FXmod.dimensions[i].code]) {\n\t\t\t\t\tx.push(FXmod.dimensions[i].label || FXmod.dimensions[i].code)\n\t\t\t\t\tif (/*opt.showCode == true &&*/ FXmod.dimensions[i].label != FXmod.dimensions[i].code && FXmod.dimensions[i].label != null) {\n\t\t\t\t\t\tx.push(FXmod.dimensions[i].code);\n\t\t\t\t\t\tif (opt.showCode == false){ hidden.push(FXmod.dimensions[i].code);}\n\t\t\t\t\t}else{}\n\t\t\t\t}\n\t\t\t\tif (FXmod.dimensions[i] && opt.y[FXmod.dimensions[i].code]) {\n\t\t\t\t\ty.push(FXmod.dimensions[i].code);\n\t\t\t\t}else{\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var i in FXmod.values) {\n\t\t\t\tif (opt.y[FXmod.values[i].value]) {\n\t\t\t\t\ty.push(FXmod.values[i].value)\n\t\t\t\t\tif (opt.showUnit == true && FXmod.values[i].unit) {\n\t\t\t\t\t\ty.push(FXmod.values[i].unit)\n\t\t\t\t\t}\n\t\t\t\t\tif (opt.showFlag == true && FXmod.values[i].flag) {\n\t\t\t\t\t\ty.push(FXmod.values[i].flag)\n\t\t\t\t\t}\n\t\t\t\t\tfor (var h in FXmod.values[i].attribute) {\n\t\t\t\t\t\thidden.push(FXmod.values[i].attribute[h])\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var i in FXmod.attributes) {\n\n\t\t\t\tif (opt.y[FXmod.attributes[i].value]) {\n\t\t\t\t\ty.push(FXmod.attributes[i].label || FXmod.attributes[i].value);\n\t\t\t\t}\n\t\t\t\telse if (opt.x[FXmod.attributes[i].value]) {\n\t\t\t\t\tx.push(FXmod.attributes[i].label || FXmod.attributes[i].value);\n\t\t\t\t}\n\t\t\t\telse if (opt.series[FXmod.attributes[i].value]) {\n\t\t\t\t\tseries.push(FXmod.attributes[i].label || FXmod.attributes[i].value);\n\t\t\t\t}\n\t\t\t}\n\n//console.log(\"V\",values.values)\n\t\t\tvar retObj = {groupedRow:groupedRow,\n\t\t\t\taggregationFn: aggValue,\n\t\t\t\tformatter: formatter,\n\t\t\t\tdecimals: values.values.decimals||2,\n\t\t\t\tshowRowHeaders: true,\n\t\t\t\thidden: hidden,\n\t\t\t\trows: series,\n\t\t\t\tcolumns: x,\n\t\t\t\taggregations: aggregations,\n\t\t\t\tvalues: y\n\t\t\t}\n\t\t\t//console.log(\"rest\",retObj)\n\t\t\treturn retObj;\n\n\n\t\t}\n\n\t\treturn function () {\n\t\t\treturn {\n\t\t\t\tconvertFX: convertFX,\n\t\t\t\tinitFXT: initFXT,\n\t\t\t\tinitFXD: initFXD,\n\t\t\t\tinitFXDgraph: initFXDgraph,\n\t\t\t\tparseInput: parseInput,\n\t\t\t\ttoFilter: toFilter,\n\t\t\t\ttoChartConfig: toChartConfig,\n\t\t\t\ttoTableConfig: toTableConfig\n\t\t\t}\n\t\t};\n\t}\n);\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/js/index.js\n ** module id = 1\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"underscore\"\n ** module id = 2\n ** module chunks = 0\n **/"],"sourceRoot":""}